Java EE
	It is a specification (Set of Rules) which
	is implemented by some web server like
	Tomcat or application server like JBoss, 
	WebLogic, WebSphere etc.
		

Frameworks:
	In modern Java programming model, frameworks
	play vital role.

	Framework:
		A partial solution used to address
		common problems.

		It provides its own library as well
		as workflow.

	There are 2 popular Java Based frameworks:
		1. Hibernate
		2. Spring

Hibernate:
	An open source Java Based framework used to
	handle data persistency.

	It uses JDBC as an underlying API for Data
	Persistency.

	Hibernate Framework is based upon ORM.

	ORM stands for Object to Relational Mapping.
	It is a set of principles.

	ORM Principles:
	1. Automated Persistence
		Developer can handle CRUD operations
		without writing SQL queries.

		The boiler-plate code is taken away
		from the developer.

	2. Persistence through Mapping Metadata
		The data persistency is handled using
		some mapping information (metadata).

	3. Querying without tables and columns;
	   rather it is done using classes and their
	   fields.

	4. Performance Optimization through several
	   techniques like Caching, Fetching etc.

	Any framework that follows all these principles
	is known as ORM framework.

	There are several ORM frameworks available:
	E.g.
		Hibernate
		Toplink
		Eclipselink
		IBatis

Hibernate Core API:
	Hibernate's Core API mainly consists of:
		1. Session
		2. SessionFactory
		3. Configuration
		4. Transaction
		5. Query

	Session:
	An interface from org.hibernate package.
	It is a lightweight object required to perform
	any CRUD operation.

	SessionFactory:
	An interface from org.hibernate package.
	It is a heavyweight object required to obtain
	Session.
	It is recommended to have only single instance
	per application. 

	Configuration:
	It is a class from org.hibernate.cfg package.
	It is used to configure Hibernate based upon
	some metadata.
	It is also used to obtain SessionFactory.

	Transaction:
	An interface from org.hibernate package.
	Used to manage transactions.
	Maintains atomicity.

	Query:
	An interface from org.hibernate.query package.
	It is used to perform query operations for
	loading the data.

	Metadata in Hibernate:
	In Hibernate, metadata is of 2 types:
		1. Mapping Specific
		2. Configuration Specific

	Mapping Specific:
	This specifies the mappings between Java Classes
	and the Relational Database Tables as well as
	Class Fields and Table Columns and so on.

	This can be done by 2 ways:
		1. Using XML File
		2. Using Annotations

	In case of XML file, by convention, its name
	is [Entity-Class-Name].hbm.xml.

	This file is referred as HBM file.
	HBM --> Hibernate Mapping

	Configuration Specific:
	This specifies the Database specific configuration
	settings using which Hibernate can establish
	connection with the database.

	It is referred as CFG file.
	By default, it is hibernate.cfg.xml

First Example Steps:
 1. Install all the Hibernate specific JARs and
	MySQL Type 4 Jar.
	There are 2 ways to install these JARs.	
	a) Download them manually from Internet.
	b) Download them using some build tools
	   like Maven, Gradle etc.

	Maven is one of the popular build tools used
	for managing project build life cycle, project
	dependencies and so on.

	Create a Maven based project.
	Setup the JDK environment as per the requirement
	Add Hibernate's Core Maven Dependency
	Add MySQL Type 4 Driver Dependency

2. Create an Entity Class.
	Declare fields, define constructors, getters
	and setters, toString() and so on.

3. Provide Mapping File (HBM File)
	As per the convention, this file must have
	name: [Entity-Class-Name].hbm.xml and it has
	to be placed under 'src/main/resources' folder.

	While declaring any class as an entity to 
	Hibernate, it requires at least one field from
	the relevant class as an identity.

4. Provide Configuration File (CFG File)
	By default, Hibernate refers to hibernate.cfg.xml file.
	This file consists of Database configurations
	along with some hibernate configurations as well.
	it has to be placed under 'src/main/resources'
	folder.

5. Create Main Class
	a) Configure Hibernate.
		This is done by instantiating 
		'Configuration' class.
	b) Obtain SessionFactory
		This is done using 'buildSessionFactory()'
		method of 'Configuration' class.

	c) Obtain Session
		This is done using 'openSession()'
		method of 'SessionFactory' interface.

	d) Create an Entity Class object.

	e) Obtain and Start the Transaction.
		This is done using 'beginTransaction()'
		method of 'Session' interface.
	
	f) Store the Entity Class Object.
		This is done using persist() method
		of 'Session' interface.

	g) Commit the Transaction.
		This is done using commit() method
		of 'Transaction' interface.

	h) Close the Session.
		This is done using Session's close() method.

	i) Close the SessionFactory.
		This is done using SessionFactory's close() method.

		




	